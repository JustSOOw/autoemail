# PR基础检查工作流
# 当向develop或main分支提交PR时触发
name: PR基础检查

on:
  pull_request:
    branches: [ develop, main ]
    types: [opened, synchronize, reopened]

jobs:
  # 代码质量检查
  code-quality:
    name: 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 缓存依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort pytest-cov
        
    - name: 代码格式检查 (Black)
      run: |
        echo "🎨 检查代码格式..."
        black --check --diff src/ tests/ scripts/
        
    - name: 导入排序检查 (isort)
      run: |
        echo "📦 检查导入排序..."
        isort --check-only --diff src/ tests/ scripts/
        
    - name: 代码风格检查 (Flake8)
      run: |
        echo "🔍 检查代码风格..."
        flake8 src/ tests/ scripts/ --max-line-length=88 --extend-ignore=E203,W503

  # 单元测试
  unit-tests:
    name: 单元测试
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 缓存依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xvfb
        
    - name: 运行测试
      run: |
        echo "🧪 运行单元测试..."
        python scripts/run_tests.py
        
    - name: 运行pytest测试
      run: |
        echo "🔬 运行pytest测试..."
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term
        
    - name: 上传覆盖率报告
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # 构建测试
  build-test:
    name: 构建测试
    runs-on: windows-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: 测试构建
      run: |
        echo "🔨 测试构建过程..."
        python scripts/build.py --test-only
        
  # 安全检查
  security-check:
    name: 安全检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 安装安全检查工具
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: 依赖安全检查
      run: |
        echo "🔒 检查依赖安全性..."
        safety check -r requirements.txt
        
    - name: 代码安全检查
      run: |
        echo "🛡️ 检查代码安全性..."
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt

  # 分支规则检查
  branch-check:
    name: 分支规则检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 检查分支命名
      run: |
        echo "🌿 检查分支命名规则..."
        BRANCH_NAME="${{ github.head_ref }}"
        echo "当前分支: $BRANCH_NAME"
        
        # 检查feature分支命名规则
        if [[ "$BRANCH_NAME" =~ ^feature-[A-Z]-[a-z0-9-]+$ ]]; then
          echo "✅ 分支命名符合规则: $BRANCH_NAME"
        elif [[ "$BRANCH_NAME" == "develop" ]] || [[ "$BRANCH_NAME" == "main" ]]; then
          echo "✅ 主要分支: $BRANCH_NAME"
        else
          echo "❌ 分支命名不符合规则: $BRANCH_NAME"
          echo "功能分支应使用格式: feature-A-功能描述 或 feature-B-功能描述"
          exit 1
        fi
        
    - name: 检查PR目标分支
      run: |
        echo "🎯 检查PR目标分支..."
        TARGET_BRANCH="${{ github.base_ref }}"
        SOURCE_BRANCH="${{ github.head_ref }}"
        
        echo "源分支: $SOURCE_BRANCH"
        echo "目标分支: $TARGET_BRANCH"
        
        # 检查合并规则
        if [[ "$SOURCE_BRANCH" =~ ^feature- ]] && [[ "$TARGET_BRANCH" == "develop" ]]; then
          echo "✅ 功能分支正确合并到develop分支"
        elif [[ "$SOURCE_BRANCH" == "develop" ]] && [[ "$TARGET_BRANCH" == "main" ]]; then
          echo "✅ develop分支正确合并到main分支"
        else
          echo "❌ 不符合分支合并规则"
          echo "规则: feature-* → develop → main"
          exit 1
        fi

  # 提交信息检查
  commit-check:
    name: 提交信息检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 检查提交信息格式
      run: |
        echo "📝 检查提交信息格式..."
        
        # 获取PR中的所有提交
        COMMITS=$(git log --pretty=format:"%s" ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
        
        # 检查每个提交信息
        while IFS= read -r commit_msg; do
          echo "检查提交: $commit_msg"
          
          # 检查提交信息格式: type(scope): description
          if [[ "$commit_msg" =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore)(\(.+\))?: .+ ]]; then
            echo "✅ 提交信息格式正确: $commit_msg"
          else
            echo "❌ 提交信息格式错误: $commit_msg"
            echo "应使用格式: type(scope): description"
            echo "类型: feat, fix, docs, style, refactor, perf, test, build, ci, chore"
            exit 1
          fi
        done <<< "$COMMITS"

  # 汇总检查结果
  pr-summary:
    name: PR检查汇总
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, build-test, security-check, branch-check, commit-check]
    if: always()
    
    steps:
    - name: 检查结果汇总
      run: |
        echo "📊 PR检查结果汇总"
        echo "===================="
        
        # 检查各个job的状态
        if [[ "${{ needs.code-quality.result }}" == "success" ]]; then
          echo "✅ 代码质量检查: 通过"
        else
          echo "❌ 代码质量检查: 失败"
        fi
        
        if [[ "${{ needs.unit-tests.result }}" == "success" ]]; then
          echo "✅ 单元测试: 通过"
        else
          echo "❌ 单元测试: 失败"
        fi
        
        if [[ "${{ needs.build-test.result }}" == "success" ]]; then
          echo "✅ 构建测试: 通过"
        else
          echo "❌ 构建测试: 失败"
        fi
        
        if [[ "${{ needs.security-check.result }}" == "success" ]]; then
          echo "✅ 安全检查: 通过"
        else
          echo "❌ 安全检查: 失败"
        fi
        
        if [[ "${{ needs.branch-check.result }}" == "success" ]]; then
          echo "✅ 分支规则检查: 通过"
        else
          echo "❌ 分支规则检查: 失败"
        fi
        
        if [[ "${{ needs.commit-check.result }}" == "success" ]]; then
          echo "✅ 提交信息检查: 通过"
        else
          echo "❌ 提交信息检查: 失败"
        fi
        
        echo "===================="
        
        # 如果有任何检查失败，则整个workflow失败
        if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
          echo "❌ PR检查未通过，请修复上述问题后重新提交"
          exit 1
        else
          echo "🎉 所有检查通过，PR可以合并！"
        fi
