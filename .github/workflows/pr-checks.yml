# PR基础检查工作流
# 当向develop或main分支提交PR时触发
name: PR基础检查

on:
  pull_request:
    branches: [ develop, main ]
    types: [opened, synchronize, reopened]

jobs:
  # 代码质量检查
  code-quality:
    name: 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: 缓存依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 代码格式检查 (Black)
      run: |
        echo "🎨 检查代码格式..."
        black --check --diff src/ tests/ scripts/ || echo "⚠️ 代码格式检查失败，但不阻塞CI流程"
        
    # 导入排序检查已禁用 - 降低代码格式要求
    # - name: 导入排序检查 (isort)
    #   run: |
    #     echo "📦 检查导入排序..."
    #     isort --check-only --diff src/ tests/ scripts/
        
    - name: 代码风格检查 (Flake8)
      run: |
        echo "🔍 检查代码风格..."
        flake8 src/ tests/ scripts/ --max-line-length=88 --extend-ignore=E203,W503,W293,E402,E302,E303,E501,W291,W292 || echo "⚠️ 代码风格检查失败，但不阻塞CI流程"

  # 单元测试
  unit-tests:
    name: 单元测试
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          xvfb \
          libgl1-mesa-dri \
          libegl1 \
          libxrandr2 \
          libxss1 \
          libxcursor1 \
          libxcomposite1 \
          libasound2t64 \
          libxi6 \
          libxtst6

    - name: 缓存依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 运行测试
      run: |
        echo "🧪 运行单元测试..."
        export QT_QPA_PLATFORM=offscreen
        export DISPLAY=:99
        export QT_LOGGING_RULES="*.debug=false"
        export QT_ASSUME_STDERR_HAS_CONSOLE=1
        xvfb-run -a python scripts/run_tests.py

    - name: 运行pytest测试
      run: |
        echo "🔬 运行pytest测试..."
        export QT_QPA_PLATFORM=offscreen
        export DISPLAY=:99
        export QT_LOGGING_RULES="*.debug=false"
        export QT_ASSUME_STDERR_HAS_CONSOLE=1
        xvfb-run -a pytest tests/ -v --cov=src --cov-report=xml --cov-report=term -p no:qt
        
    - name: 上传覆盖率报告
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # 构建测试
  build-test:
    name: 构建测试
    runs-on: windows-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: 测试构建
      run: |
        echo "🔨 测试构建过程..."
        python scripts/build.py --test-only
        
  # 简化安全检查 - 只运行本地脚本
  security-check:
    name: 安全检查
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 运行本地安全审查脚本
      run: |
        echo "🔒 运行本地安全审查脚本..."
        python scripts/security_check.py
        echo "✅ 本地安全审查通过"

  # 分支规则检查
  branch-check:
    name: 分支规则检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 检查分支命名
      run: |
        echo "🌿 检查分支命名规则..."
        BRANCH_NAME="${{ github.head_ref }}"
        echo "当前分支: $BRANCH_NAME"
        
        # 检查feature分支命名规则
        if [[ "$BRANCH_NAME" =~ ^feature-[A-Z]-[a-z0-9-]+$ ]]; then
          echo "✅ 分支命名符合规则: $BRANCH_NAME"
        elif [[ "$BRANCH_NAME" == "develop" ]] || [[ "$BRANCH_NAME" == "main" ]]; then
          echo "✅ 主要分支: $BRANCH_NAME"
        else
          echo "❌ 分支命名不符合规则: $BRANCH_NAME"
          echo "功能分支应使用格式: feature-A-功能描述 或 feature-B-功能描述"
          exit 1
        fi
        
    - name: 检查PR目标分支
      run: |
        echo "🎯 检查PR目标分支..."
        TARGET_BRANCH="${{ github.base_ref }}"
        SOURCE_BRANCH="${{ github.head_ref }}"
        
        echo "源分支: $SOURCE_BRANCH"
        echo "目标分支: $TARGET_BRANCH"
        
        # 检查合并规则 - 允许feature分支直接向main提PR进行发布
        if [[ "$SOURCE_BRANCH" =~ ^feature- ]] && [[ "$TARGET_BRANCH" == "develop" ]]; then
          echo "✅ 功能分支正确合并到develop分支"
        elif [[ "$SOURCE_BRANCH" =~ ^feature- ]] && [[ "$TARGET_BRANCH" == "main" ]]; then
          echo "✅ 功能分支向main分支提PR进行发布"
        elif [[ "$SOURCE_BRANCH" == "develop" ]] && [[ "$TARGET_BRANCH" == "main" ]]; then
          echo "✅ develop分支正确合并到main分支"
        else
          echo "❌ 不符合分支合并规则"
          echo "规则: feature-* → develop → main 或 feature-* → main (发布)"
          exit 1
        fi



  # 汇总检查结果 - 安全检查改为可选
  pr-summary:
    name: PR检查汇总
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, build-test, security-check, branch-check]
    if: always()

    steps:
    - name: 检查结果汇总
      run: |
        echo "📊 PR检查结果汇总"
        echo "===================="

        # 检查各个job的状态
        if [[ "${{ needs.code-quality.result }}" == "success" ]]; then
          echo "✅ 代码质量检查: 通过"
        else
          echo "❌ 代码质量检查: 失败"
        fi

        if [[ "${{ needs.unit-tests.result }}" == "success" ]]; then
          echo "✅ 单元测试: 通过"
        else
          echo "❌ 单元测试: 失败"
        fi

        if [[ "${{ needs.build-test.result }}" == "success" ]]; then
          echo "✅ 构建测试: 通过"
        else
          echo "❌ 构建测试: 失败"
        fi

        # 安全检查改为可选 - 不影响PR合并
        if [[ "${{ needs.security-check.result }}" == "success" ]]; then
          echo "✅ 安全检查: 通过"
        elif [[ "${{ needs.security-check.result }}" == "failure" ]]; then
          echo "⚠️ 安全检查: 发现问题 (不阻塞合并)"
        else
          echo "⚠️ 安全检查: 跳过或取消 (不阻塞合并)"
        fi

        if [[ "${{ needs.branch-check.result }}" == "success" ]]; then
          echo "✅ 分支规则检查: 通过"
        else
          echo "❌ 分支规则检查: 失败"
        fi

        echo "===================="

        # 只有核心检查失败才阻塞PR（排除安全检查）
        CORE_CHECKS_FAILED=false

        if [[ "${{ needs.code-quality.result }}" == "failure" ]]; then
          CORE_CHECKS_FAILED=true
        fi

        if [[ "${{ needs.unit-tests.result }}" == "failure" ]]; then
          CORE_CHECKS_FAILED=true
        fi

        if [[ "${{ needs.build-test.result }}" == "failure" ]]; then
          CORE_CHECKS_FAILED=true
        fi

        if [[ "${{ needs.branch-check.result }}" == "failure" ]]; then
          CORE_CHECKS_FAILED=true
        fi

        if [[ "$CORE_CHECKS_FAILED" == "true" ]]; then
          echo "❌ 核心检查未通过，请修复上述问题后重新提交"
          exit 1
        else
          echo "🎉 核心检查通过，PR可以合并！"
          if [[ "${{ needs.security-check.result }}" != "success" ]]; then
            echo "💡 提示: 安全检查发现了一些问题，建议在合并后处理"
          fi
        fi
