/*
 * ÈÇÆÁÆ±ÁÆ°ÁêÜÈ°µÈù¢ - ÁÆÄÂåñÁâàÊú¨
 * ÁßªÈô§Â§çÊùÇ‰æùËµñÔºå‰∏ìÊ≥®‰∫éÊ†∏ÂøÉÂäüËÉΩ
 */

import QtQuick 2.15
import QtQuick.Controls 2.15
import QtQuick.Layouts 1.15
import QtQuick.Controls.Material 2.15

Rectangle {
    id: root
    color: "#f5f5f5"
    focus: true

    // ÈîÆÁõòÂø´Êç∑ÈîÆ
    Keys.onPressed: function(event) {
        if (event.key === Qt.Key_F5) {
            // F5 Âà∑Êñ∞
            refreshButton.clicked()
            event.accepted = true
        } else if (event.key === Qt.Key_Delete && selectedEmails.length > 0) {
            // DeleteÈîÆÂà†Èô§ÈÄâ‰∏≠È°π
            batchDeleteDialog.open()
            event.accepted = true
        } else if (event.modifiers === Qt.ControlModifier && event.key === Qt.Key_A) {
            // Ctrl+A ÂÖ®ÈÄâ
            selectAllCheckBox.checked = !selectAllCheckBox.checked
            event.accepted = true
        } else if (event.key === Qt.Key_Escape) {
            // EscÈîÆÊ∏ÖÈô§ÈÄâÊã©
            clearSelection()
            event.accepted = true
        }
    }

    // ÂØπÂ§ñÊö¥Èú≤ÁöÑÂ±ûÊÄß
    property var emailList: []
    property var tagList: []
    property int currentPage: 1
    property int totalPages: 1
    property int totalEmails: 0
    property bool isLoading: false
    property var selectedEmails: []
    property bool selectAllMode: false

    // ÊêúÁ¥¢Áõ∏ÂÖ≥Â±ûÊÄß
    property bool isSearching: false
    property string searchResultText: ""
    property var currentFilters: ({})
    property string lastSearchQuery: ""

    // ÂØπÂ§ñÊö¥Èú≤ÁöÑ‰ø°Âè∑
    signal searchEmails(string keyword, string status, var tags, int page)
    signal deleteEmail(int emailId)
    signal editEmail(int emailId, var emailData)
    signal exportEmails(string format)
    signal refreshRequested()

    ColumnLayout {
        anchors.fill: parent
        anchors.margins: 20
        spacing: 20

        // È°µÈù¢Ê†áÈ¢ò
        Label {
            text: "üìã ÈÇÆÁÆ±ÁÆ°ÁêÜ"
            font.bold: true
            font.pixelSize: 24
            color: "#333"
            Layout.alignment: Qt.AlignHCenter
        }



        // Êìç‰ΩúÊåâÈíÆÊ†è
        Rectangle {
            Layout.fillWidth: true
            height: 70
            color: "white"
            radius: 8
            border.color: "#e0e0e0"

            RowLayout {
                anchors.fill: parent
                anchors.margins: 15
                spacing: 15
                anchors.verticalCenter: parent.verticalCenter

                Label {
                    text: "Êìç‰Ωú:"
                    font.pixelSize: 14
                    color: "#666"
                }

                Button {
                    id: refreshButton
                    text: isRefreshing ? "‚è≥ Âà∑Êñ∞‰∏≠..." : "üîÑ Âà∑Êñ∞"
                    enabled: !isRefreshing

                    property bool isRefreshing: false

                    onClicked: {
                        isRefreshing = true
                        root.refreshRequested()

                        // Ê®°ÊãüÂà∑Êñ∞ÂÆåÊàê
                        Qt.callLater(function() {
                            refreshTimer.start()
                        })
                    }

                    Timer {
                        id: refreshTimer
                        interval: 1000
                        onTriggered: refreshButton.isRefreshing = false
                    }
                }

                Item { Layout.fillWidth: true }

                // ÊâπÈáèÊìç‰ΩúÊåâÈíÆ
                Button {
                    text: "üîß ÊâπÈáèÊìç‰Ωú"
                    Material.background: Material.Purple
                    enabled: selectedEmails.length > 0
                    onClicked: batchOperationMenu.open()

                    Menu {
                        id: batchOperationMenu
                        MenuItem {
                            text: "ÊâπÈáèÂà†Èô§"
                            onTriggered: batchDeleteDialog.open()
                        }
                        MenuItem {
                            text: "ÊâπÈáèÊ∑ªÂä†Ê†áÁ≠æ"
                            onTriggered: batchTagDialog.open()
                        }
                        MenuItem {
                            text: "ÊâπÈáè‰øÆÊîπÁä∂ÊÄÅ"
                            onTriggered: batchStatusDialog.open()
                        }
                    }
                }

                Button {
                    text: "üì§ ÂØºÂá∫"
                    onClicked: exportDialog.open()
                }
            }
        }

        // ÈÇÆÁÆ±ÂàóË°®Âå∫Âüü
        Rectangle {
            Layout.fillWidth: true
            Layout.fillHeight: true
            color: "white"
            radius: 8
            border.color: "#e0e0e0"

            ColumnLayout {
                anchors.fill: parent
                anchors.margins: 20
                spacing: 15

                // Ê∑ªÂä†ËÉåÊôØÁÇπÂáªÂå∫ÂüüÊù•ÂèñÊ∂àÊêúÁ¥¢Ê°ÜÁÑ¶ÁÇπ
                MouseArea {
                    anchors.fill: parent
                    z: -1
                    onClicked: {
                        searchField.focus = false
                    }
                }

                // ÊêúÁ¥¢ÂíåÊìç‰ΩúÊ†è
                Rectangle {
                    Layout.fillWidth: true
                    height: 60
                    color: "transparent"

                    RowLayout {
                        anchors.fill: parent
                        anchors.margins: 8
                        spacing: 16

                        // ÊêúÁ¥¢Ê°Ü
                        Rectangle {
                            Layout.preferredWidth: 360
                            height: 44
                            color: "#ffffff"
                            radius: 22
                            border.color: searchField.activeFocus ? "#2196F3" : "#ddd"
                            border.width: 2

                            RowLayout {
                                anchors.fill: parent
                                anchors.leftMargin: 16
                                anchors.rightMargin: 16
                                spacing: 10

                                Text {
                                    text: isSearching ? "‚è≥" : "üîç"
                                    font.pixelSize: 16
                                    color: "#666"
                                }

                                TextField {
                                    id: searchField
                                    Layout.fillWidth: true
                                    placeholderText: activeFocus || text.length > 0 ? "" : "ÊêúÁ¥¢ÈÇÆÁÆ±Âú∞ÂùÄ„ÄÅÂüüÂêç..."
                                    font.pixelSize: 14
                                    color: "#333"
                                    background: Item {}
                                    selectByMouse: true
                                    onTextChanged: {
                                        if (text.length > 0) {
                                            searchTimer.restart()
                                        } else {
                                            clearSearch()
                                        }
                                    }
                                }

                                Button {
                                    visible: searchField.text.length > 0
                                    text: "‚úï"
                                    width: 20
                                    height: 20
                                    background: Rectangle {
                                        color: parent.hovered ? "#f0f0f0" : "transparent"
                                        radius: 10
                                    }
                                    onClicked: clearSearch()
                                }
                            }
                        }

                        Item { Layout.fillWidth: true }

                        // Êìç‰ΩúÊåâÈíÆ
                        RowLayout {
                            spacing: 12

                            Button {
                                text: "Á≠õÈÄâ"
                                width: 80
                                height: 36
                                Material.background: Material.Orange
                                onClicked: advancedFilterPopup.open()
                            }

                            Button {
                                text: "ÂØºÂá∫"
                                width: 80
                                height: 36
                                Material.background: Material.Green
                                onClicked: exportEmailsDialog.open()
                            }

                            Button {
                                text: "Âà∑Êñ∞"
                                width: 80
                                height: 36
                                Material.background: Material.Blue
                                onClicked: root.refreshRequested()
                            }
                        }
                    }
                }

                // ÊêúÁ¥¢ÁªìÊûúÁªüËÆ°
                Rectangle {
                    Layout.fillWidth: true
                    height: 30
                    color: "transparent"
                    visible: searchStats.visible

                    Label {
                        id: searchStats
                        anchors.left: parent.left
                        anchors.verticalCenter: parent.verticalCenter
                        text: searchResultText
                        font.pixelSize: 12
                        color: "#666"
                        visible: false
                    }
                }

                // ÂàóË°®Ê†áÈ¢òÊ†è
                RowLayout {
                    Layout.fillWidth: true
                    spacing: 10

                    CheckBox {
                        id: selectAllCheckBox
                        text: "ÂÖ®ÈÄâ"
                        font.pixelSize: 14
                        checked: root.selectAllMode
                        onCheckedChanged: {
                            root.selectAllMode = checked
                            if (checked) {
                                root.selectedEmails = root.emailList.map(function(email) {
                                    return email.id
                                })
                            } else {
                                root.selectedEmails = []
                            }
                        }
                    }

                    Label {
                        text: "ÈÇÆÁÆ±ÂàóË°®"
                        font.bold: true
                        font.pixelSize: 16
                        color: "#333"
                    }

                    Item { Layout.fillWidth: true }

                    Label {
                        text: root.selectedEmails.length > 0 ?
                              "Â∑≤ÈÄâÊã© " + root.selectedEmails.length + " ‰∏™ÔºåÂÖ± " + root.totalEmails + " ‰∏™ÈÇÆÁÆ±" :
                              "ÂÖ± " + root.totalEmails + " ‰∏™ÈÇÆÁÆ±"
                        font.pixelSize: 14
                        color: root.selectedEmails.length > 0 ? "#2196F3" : "#666"
                        font.weight: root.selectedEmails.length > 0 ? Font.DemiBold : Font.Normal

                        Behavior on color { PropertyAnimation { duration: 200 } }
                    }
                }

                // Âä†ËΩΩÊåáÁ§∫Âô®
                Rectangle {
                    Layout.fillWidth: true
                    Layout.fillHeight: true
                    color: "transparent"
                    visible: root.isLoading

                    ColumnLayout {
                        anchors.centerIn: parent
                        spacing: 20

                        BusyIndicator {
                            Layout.alignment: Qt.AlignHCenter
                            running: root.isLoading
                        }

                        Label {
                            text: "Ê≠£Âú®Âä†ËΩΩÈÇÆÁÆ±ÂàóË°®..."
                            font.pixelSize: 14
                            color: "#666"
                            Layout.alignment: Qt.AlignHCenter
                        }
                    }
                }

                // ÈÇÆÁÆ±ÂàóË°®
                ListView {
                    id: emailListView
                    Layout.fillWidth: true
                    Layout.fillHeight: true
                    visible: !root.isLoading

                    model: root.emailList
                    spacing: 8

                    delegate: Rectangle {
                        width: emailListView.width
                        height: 90
                        color: {
                            if (isSelected) {
                                return "#E3F2FD"
                            } else if (mouseArea.containsMouse) {
                                return "#F5F5F5"
                            }
                            return "white"
                        }
                        radius: 6
                        border.color: isSelected ? "#2196F3" : "#e0e0e0"
                        border.width: isSelected ? 2 : 1

                        // ÁÆÄÂåñÁöÑÈò¥ÂΩ±ÊïàÊûú
                        Rectangle {
                            anchors.fill: parent
                            anchors.margins: -4
                            visible: mouseArea.containsMouse || isSelected
                            color: "#40000000"
                            radius: parent.radius
                            opacity: 0.1
                            z: -1
                            y: 1
                        }

                        // Âä®ÁîªÊïàÊûú
                        Behavior on color { PropertyAnimation { duration: 150 } }
                        Behavior on border.color { PropertyAnimation { duration: 150 } }
                        Behavior on border.width { PropertyAnimation { duration: 150 } }

                        property bool isSelected: root.selectedEmails.indexOf(modelData.id) >= 0

                        // ÁÇπÂáªÈÄâÊã©
                        MouseArea {
                            id: mouseArea
                            anchors.fill: parent
                            acceptedButtons: Qt.LeftButton | Qt.RightButton
                            hoverEnabled: true

                            onClicked: function(mouse) {
                                if (mouse.modifiers & Qt.ControlModifier) {
                                    toggleItemSelection(modelData)
                                } else if (mouse.button === Qt.RightButton) {
                                    // Âè≥ÈîÆËèúÂçï
                                    console.log("Âè≥ÈîÆËèúÂçï")
                                }
                            }

                            onPressAndHold: {
                                toggleItemSelection(modelData)
                            }
                        }

                        RowLayout {
                            anchors.fill: parent
                            anchors.margins: 15
                            spacing: 15
                            anchors.verticalCenter: parent.verticalCenter

                            // ÈÄâÊã©Ê°Ü
                            CheckBox {
                                visible: root.selectedEmails.length > 0 || parent.parent.isSelected
                                checked: parent.parent.isSelected
                                onCheckedChanged: {
                                    toggleItemSelection(modelData)
                                }
                            }

                            // ÈÇÆÁÆ±‰ø°ÊÅØ
                            ColumnLayout {
                                Layout.fillWidth: true
                                spacing: 5

                                Text {
                                    text: highlightSearchText(modelData.email_address || "", root.lastSearchQuery)
                                    font.pixelSize: 14
                                    font.weight: Font.DemiBold
                                    color: "#2196F3"
                                    textFormat: Text.RichText
                                }

                                RowLayout {
                                    spacing: 10

                                    Label {
                                        text: "ÂüüÂêç: " + (modelData.domain || "")
                                        font.pixelSize: 12
                                        color: "#666"
                                    }

                                    Label {
                                        text: "Áä∂ÊÄÅ: " + (modelData.status || "")
                                        font.pixelSize: 12
                                        color: modelData.status === "active" ? "#4CAF50" : "#F44336"
                                    }

                                    Label {
                                        text: "ÂàõÂª∫: " + (modelData.created_at ? new Date(modelData.created_at).toLocaleDateString() : "")
                                        font.pixelSize: 12
                                        color: "#666"
                                    }
                                }
                            }

                            // Ê†áÁ≠æÊòæÁ§∫
                            Flow {
                                Layout.preferredWidth: 150
                                spacing: 5

                                Repeater {
                                    model: modelData.tags || []
                                    Rectangle {
                                        width: tagLabel.width + 10
                                        height: 20
                                        color: "#E3F2FD"
                                        radius: 10
                                        border.color: "#2196F3"

                                        Label {
                                            id: tagLabel
                                            anchors.centerIn: parent
                                            text: modelData
                                            font.pixelSize: 10
                                            color: "#2196F3"
                                        }
                                    }
                                }
                            }

                            // Êìç‰ΩúÊåâÈíÆ
                            RowLayout {
                                spacing: 8
                                Layout.alignment: Qt.AlignVCenter

                                Button {
                                    text: "‚úèÔ∏è"
                                    font.pixelSize: 14
                                    implicitWidth: 36
                                    implicitHeight: 36
                                    ToolTip.text: "ÁºñËæë"
                                    onClicked: {
                                        editEmailDialog.emailData = modelData
                                        editEmailDialog.open()
                                    }
                                }

                                Button {
                                    text: "üóëÔ∏è"
                                    font.pixelSize: 14
                                    implicitWidth: 36
                                    implicitHeight: 36
                                    Material.background: Material.Red
                                    ToolTip.text: "Âà†Èô§"
                                    onClicked: {
                                        deleteConfirmDialog.emailId = modelData.id
                                        deleteConfirmDialog.emailAddress = modelData.email_address
                                        deleteConfirmDialog.open()
                                    }
                                }
                            }
                        }
                    }
                }

                // ÂàÜÈ°µÊéßÂà∂
                Rectangle {
                    Layout.fillWidth: true
                    height: 60
                    color: "transparent"
                    visible: !root.isLoading && root.totalPages > 1

                    RowLayout {
                        anchors.centerIn: parent
                        spacing: 10

                        Button {
                            text: "‚óÄ"
                            enabled: root.currentPage > 1
                            onClicked: {
                                root.currentPage = root.currentPage - 1
                                performSearch()
                            }
                        }

                        Label {
                            text: "Á¨¨ " + root.currentPage + " È°µÔºåÂÖ± " + root.totalPages + " È°µ"
                            font.pixelSize: 14
                            color: "#666"
                        }

                        Button {
                            text: "‚ñ∂"
                            enabled: root.currentPage < root.totalPages
                            onClicked: {
                                root.currentPage = root.currentPage + 1
                                performSearch()
                            }
                        }

                        Item { width: 20 }

                        Label {
                            text: "ÂÖ± " + root.totalEmails + " ‰∏™ÈÇÆÁÆ±"
                            font.pixelSize: 12
                            color: "#999"
                        }
                    }
                }
            }
        }
    }

    // ==================== ÂÜÖÈÉ®ÊñπÊ≥ï ====================

    function performSearch() {
        root.searchEmails(searchField.text, "", [], root.currentPage)
    }

    function resetToFirstPage() {
        root.currentPage = 1
    }

    function clearSelection() {
        root.selectedEmails = []
        root.selectAllMode = false
    }

    function toggleItemSelection(item) {
        var emailId = item.id
        var index = root.selectedEmails.indexOf(emailId)

        if (index < 0) {
            root.selectedEmails.push(emailId)
        } else {
            root.selectedEmails.splice(index, 1)
        }

        // Ëß¶ÂèëÂ±ûÊÄßÊõ¥Êñ∞
        root.selectedEmails = root.selectedEmails.slice()

        // Êõ¥Êñ∞ÂÖ®ÈÄâÁä∂ÊÄÅ
        root.selectAllMode = root.selectedEmails.length === root.emailList.length
    }

    function highlightSearchText(originalText, searchQuery) {
        if (!searchQuery || searchQuery.length === 0) {
            return originalText
        }

        var regex = new RegExp("(" + searchQuery.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') + ")", "gi")
        return originalText.replace(regex, '<span style="background-color: #FFEB3B; color: #000;">$1</span>')
    }

    function performAdvancedSearch() {
        root.isSearching = true
        root.lastSearchQuery = searchField.text
        var startTime = Date.now()

        // Ê®°ÊãüÊêúÁ¥¢Âª∂Ëøü
        Qt.callLater(function() {
            var searchTime = (Date.now() - startTime) / 1000
            var resultCount = root.totalEmails // ÂÆûÈôÖÂ∫îËØ•ÊòØÊêúÁ¥¢ÁªìÊûúÊï∞Èáè

            updateSearchStats(searchField.text, resultCount, searchTime)
            root.isSearching = false

            // Ë∞ÉÁî®ÂÆûÈôÖÊêúÁ¥¢
            root.searchEmails(searchField.text, currentFilters.status || "", currentFilters.tags || [], 1)
        })
    }

    function clearSearch() {
        searchField.text = ""
        root.lastSearchQuery = ""
        root.currentFilters = {}
        searchStats.visible = false
        root.searchEmails("", "", [], 1)
    }

    function updateSearchStats(query, resultCount, searchTime) {
        if (query.length > 0) {
            root.searchResultText = "ÊêúÁ¥¢ \"" + query + "\" ÊâæÂà∞ " + resultCount + " ‰∏™ÁªìÊûú (" + searchTime.toFixed(2) + "s)"
            searchStats.visible = true
        } else {
            searchStats.visible = false
        }
    }

    // È´òÁ∫ßÁ≠õÈÄâÂºπÁ™ó
    Popup {
        id: advancedFilterPopup
        y: 140
        width: 320
        height: 280

        background: Rectangle {
            color: "white"
            radius: 8
            border.width: 1
            border.color: "#e0e0e0"

            // ÁÆÄÂåñÁöÑÈò¥ÂΩ±ÊïàÊûú
            Rectangle {
                anchors.fill: parent
                anchors.margins: -12
                color: "#40000000"
                radius: parent.radius
                opacity: 0.3
                z: -1
                y: 4
            }
        }

        ColumnLayout {
            anchors.fill: parent
            anchors.margins: 15
            spacing: 15

            Label {
                text: "È´òÁ∫ßÁ≠õÈÄâ"
                font.pixelSize: 16
                font.weight: Font.DemiBold
                color: "#333"
            }

            // Áä∂ÊÄÅÁ≠õÈÄâ
            ColumnLayout {
                Layout.fillWidth: true
                spacing: 5

                Label {
                    text: "Áä∂ÊÄÅ:"
                    font.pixelSize: 14
                    color: "#666"
                }

                ComboBox {
                    id: statusFilter
                    Layout.fillWidth: true
                    model: ["ÂÖ®ÈÉ®", "Ê¥ªË∑É", "ÈùûÊ¥ªË∑É", "ÂΩíÊ°£"]
                    currentIndex: 0
                }
            }

            // ÂüüÂêçÁ≠õÈÄâ
            ColumnLayout {
                Layout.fillWidth: true
                spacing: 5

                Label {
                    text: "ÂüüÂêç:"
                    font.pixelSize: 14
                    color: "#666"
                }

                TextField {
                    id: domainFilter
                    Layout.fillWidth: true
                    placeholderText: "ËæìÂÖ•ÂüüÂêç..."
                }
            }

            Item { Layout.fillHeight: true }

            RowLayout {
                Layout.fillWidth: true

                Button {
                    text: "ÈáçÁΩÆ"
                    onClicked: {
                        statusFilter.currentIndex = 0
                        domainFilter.text = ""
                        root.currentFilters = {}
                    }
                }

                Item { Layout.fillWidth: true }

                Button {
                    text: "Â∫îÁî®"
                    Material.background: Material.Blue
                    onClicked: {
                        root.currentFilters = {
                            status: statusFilter.currentIndex > 0 ? statusFilter.currentText : "",
                            domain: domainFilter.text
                        }
                        performAdvancedSearch()
                        advancedFilterPopup.close()
                    }
                }
            }
        }
    }

    // ÊêúÁ¥¢ÂÆöÊó∂Âô®
    Timer {
        id: searchTimer
        interval: 500
        repeat: false
        onTriggered: {
            if (searchField.text.length > 2) {
                performAdvancedSearch()
            }
        }
    }

    // Âà†Èô§Á°ÆËÆ§ÂØπËØùÊ°Ü
    Dialog {
        id: deleteConfirmDialog
        title: "Á°ÆËÆ§Âà†Èô§"
        modal: true
        anchors.centerIn: parent

        property int emailId: 0
        property string emailAddress: ""

        ColumnLayout {
            spacing: 20

            Label {
                text: "Á°ÆÂÆöË¶ÅÂà†Èô§ÈÇÆÁÆ± \"" + deleteConfirmDialog.emailAddress + "\" ÂêóÔºü"
                wrapMode: Text.WordWrap
                Layout.preferredWidth: 300
            }

            RowLayout {
                Layout.alignment: Qt.AlignRight
                spacing: 10

                Button {
                    text: "ÂèñÊ∂à"
                    onClicked: deleteConfirmDialog.close()
                }

                Button {
                    text: "Âà†Èô§"
                    Material.background: Material.Red
                    onClicked: {
                        root.deleteEmail(deleteConfirmDialog.emailId)
                        deleteConfirmDialog.close()
                    }
                }
            }
        }
    }

    // ÁºñËæëÈÇÆÁÆ±ÂØπËØùÊ°Ü
    Dialog {
        id: editEmailDialog
        title: "ÁºñËæëÈÇÆÁÆ±"
        modal: true
        anchors.centerIn: parent
        width: 400

        property var emailData: ({})

        ColumnLayout {
            spacing: 15
            width: parent.width

            TextField {
                id: editNotesField
                Layout.fillWidth: true
                placeholderText: "Â§áÊ≥®‰ø°ÊÅØ..."
                text: editEmailDialog.emailData.notes || ""
            }

            RowLayout {
                Layout.alignment: Qt.AlignRight
                spacing: 10

                Button {
                    text: "ÂèñÊ∂à"
                    onClicked: editEmailDialog.close()
                }

                Button {
                    text: "‰øùÂ≠ò"
                    Material.background: Material.Blue
                    onClicked: {
                        var updatedData = {
                            id: editEmailDialog.emailData.id,
                            notes: editNotesField.text
                        }
                        root.editEmail(editEmailDialog.emailData.id, updatedData)
                        editEmailDialog.close()
                    }
                }
            }
        }
    }

    // ÂØºÂá∫ÂØπËØùÊ°Ü
    Dialog {
        id: exportDialog
        title: "ÂØºÂá∫ÈÇÆÁÆ±Êï∞ÊçÆ"
        modal: true
        anchors.centerIn: parent
        width: 300

        ColumnLayout {
            spacing: 15
            width: parent.width

            Label {
                text: "ÈÄâÊã©ÂØºÂá∫Ê†ºÂºè:"
                font.pixelSize: 14
            }

            ComboBox {
                id: formatCombo
                Layout.fillWidth: true
                model: ["JSON", "CSV", "Excel"]
                currentIndex: 0
            }

            RowLayout {
                Layout.alignment: Qt.AlignRight
                spacing: 10

                Button {
                    text: "ÂèñÊ∂à"
                    onClicked: exportDialog.close()
                }

                Button {
                    text: "ÂØºÂá∫"
                    Material.background: Material.Blue
                    onClicked: {
                        root.exportEmails(formatCombo.currentText.toLowerCase())
                        exportDialog.close()
                    }
                }
            }
        }
    }

    // ÊâπÈáèÂà†Èô§Á°ÆËÆ§ÂØπËØùÊ°Ü
    Dialog {
        id: batchDeleteDialog
        title: "ÊâπÈáèÂà†Èô§Á°ÆËÆ§"
        modal: true
        anchors.centerIn: parent
        width: 400

        ColumnLayout {
            spacing: 20

            Label {
                text: "Á°ÆÂÆöË¶ÅÂà†Èô§ÈÄâ‰∏≠ÁöÑ " + root.selectedEmails.length + " ‰∏™ÈÇÆÁÆ±ÂêóÔºü\nÊ≠§Êìç‰Ωú‰∏çÂèØÊí§ÈîÄ„ÄÇ"
                wrapMode: Text.WordWrap
                Layout.preferredWidth: 350
            }

            RowLayout {
                Layout.alignment: Qt.AlignRight
                spacing: 10

                Button {
                    text: "ÂèñÊ∂à"
                    onClicked: batchDeleteDialog.close()
                }

                Button {
                    text: "Á°ÆËÆ§Âà†Èô§"
                    Material.background: Material.Red
                    onClicked: {
                        console.log("ÊâπÈáèÂà†Èô§ÈÇÆÁÆ±:", root.selectedEmails)
                        // ËøôÈáåÂ∫îËØ•Ë∞ÉÁî®ÂÆûÈôÖÁöÑÊâπÈáèÂà†Èô§API
                        root.clearSelection()
                        batchDeleteDialog.close()
                    }
                }
            }
        }
    }

    // ÊâπÈáèÊ∑ªÂä†Ê†áÁ≠æÂØπËØùÊ°Ü
    Dialog {
        id: batchTagDialog
        title: "ÊâπÈáèÊ∑ªÂä†Ê†áÁ≠æ"
        modal: true
        anchors.centerIn: parent
        width: 400

        ColumnLayout {
            spacing: 15
            width: parent.width

            Label {
                text: "‰∏∫ÈÄâ‰∏≠ÁöÑ " + root.selectedEmails.length + " ‰∏™ÈÇÆÁÆ±Ê∑ªÂä†Ê†áÁ≠æ:"
                wrapMode: Text.WordWrap
            }

            TextField {
                id: batchTagField
                Layout.fillWidth: true
                placeholderText: "ËæìÂÖ•Ê†áÁ≠æÂêçÁß∞ÔºåÁî®ÈÄóÂè∑ÂàÜÈöî..."
            }

            RowLayout {
                Layout.alignment: Qt.AlignRight
                spacing: 10

                Button {
                    text: "ÂèñÊ∂à"
                    onClicked: batchTagDialog.close()
                }

                Button {
                    text: "Ê∑ªÂä†"
                    Material.background: Material.Blue
                    enabled: batchTagField.text.trim().length > 0
                    onClicked: {
                        console.log("ÊâπÈáèÊ∑ªÂä†Ê†áÁ≠æ:", root.selectedEmails, batchTagField.text)
                        // ËøôÈáåÂ∫îËØ•Ë∞ÉÁî®ÂÆûÈôÖÁöÑÊâπÈáèÊ∑ªÂä†Ê†áÁ≠æAPI
                        batchTagField.text = ""
                        batchTagDialog.close()
                        root.clearSelection()
                    }
                }
            }
        }
    }

    // ÊâπÈáè‰øÆÊîπÁä∂ÊÄÅÂØπËØùÊ°Ü
    Dialog {
        id: batchStatusDialog
        title: "ÊâπÈáè‰øÆÊîπÁä∂ÊÄÅ"
        modal: true
        anchors.centerIn: parent
        width: 300

        ColumnLayout {
            spacing: 15
            width: parent.width

            Label {
                text: "‰øÆÊîπÈÄâ‰∏≠ÁöÑ " + root.selectedEmails.length + " ‰∏™ÈÇÆÁÆ±Áä∂ÊÄÅ‰∏∫:"
                wrapMode: Text.WordWrap
            }

            ComboBox {
                id: batchStatusCombo
                Layout.fillWidth: true
                model: ["Ê¥ªË∑É", "ÈùûÊ¥ªË∑É", "ÂΩíÊ°£"]
                currentIndex: 0
            }

            RowLayout {
                Layout.alignment: Qt.AlignRight
                spacing: 10

                Button {
                    text: "ÂèñÊ∂à"
                    onClicked: batchStatusDialog.close()
                }

                Button {
                    text: "‰øÆÊîπ"
                    Material.background: Material.Blue
                    onClicked: {
                        console.log("ÊâπÈáè‰øÆÊîπÁä∂ÊÄÅ:", root.selectedEmails, batchStatusCombo.currentText)
                        // ËøôÈáåÂ∫îËØ•Ë∞ÉÁî®ÂÆûÈôÖÁöÑÊâπÈáè‰øÆÊîπÁä∂ÊÄÅAPI
                        batchStatusDialog.close()
                        root.clearSelection()
                    }
                }
            }
        }
    }
}
