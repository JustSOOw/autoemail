/*
 * ÈÇÆÁÆ±ÁÆ°ÁêÜÈ°µÈù¢
 * Êèê‰æõÈÇÆÁÆ±ÂàóË°®ÊòæÁ§∫„ÄÅÊêúÁ¥¢Á≠õÈÄâ„ÄÅÂàÜÈ°µ„ÄÅÁºñËæëÂà†Èô§Á≠âÂäüËÉΩ
 */

import QtQuick 2.15
import QtQuick.Controls 2.15
import QtQuick.Layouts 1.15
import QtQuick.Controls.Material 2.15
import "../components"

Rectangle {
    id: root
    color: "#f5f5f5"

    // ÂØπÂ§ñÊö¥Èú≤ÁöÑÂ±ûÊÄß
    property var emailList: []
    property var tagList: []
    property int currentPage: 1
    property int totalPages: 1
    property int totalEmails: 0
    property bool isLoading: false
    property var selectedEmails: []
    property bool selectAllMode: false

    // ÂØπÂ§ñÊö¥Èú≤ÁöÑ‰ø°Âè∑
    signal searchEmails(string keyword, string status, var tags, int page)
    signal deleteEmail(int emailId)
    signal editEmail(int emailId, var emailData)
    signal exportEmails(string format)
    signal refreshRequested()

    ColumnLayout {
        anchors.fill: parent
        anchors.margins: 20
        spacing: 20

        // È°µÈù¢Ê†áÈ¢ò
        Label {
            text: "üìã ÈÇÆÁÆ±ÁÆ°ÁêÜ"
            font.bold: true
            font.pixelSize: 24
            color: "#333"
            Layout.alignment: Qt.AlignHCenter
        }

        // È´òÁ∫ßÊêúÁ¥¢Âå∫Âüü
        ColumnLayout {
            Layout.fillWidth: true
            spacing: DesignSystem.spacing.sm

            // ÊêúÁ¥¢Ê†è
            AdvancedSearchBar {
                id: advancedSearchBar
                Layout.fillWidth: true

                onSearchRequested: function(query, filters) {
                    performAdvancedSearch(query, filters)
                }

                onSearchCleared: {
                    clearSearch()
                }
            }

            // ÊêúÁ¥¢ÁªìÊûúÁªüËÆ°
            SearchResultStats {
                id: searchStats
                Layout.fillWidth: true
                currentPage: root.currentPage
                pageSize: 20

                onSearchCleared: {
                    advancedSearchBar.clearSearch()
                    clearSearch()
                }
            }

            // Êìç‰ΩúÊåâÈíÆÊ†è
            Rectangle {
                Layout.fillWidth: true
                height: 60
                color: "white"
                radius: 8
                border.color: "#e0e0e0"

                RowLayout {
                    anchors.fill: parent
                    anchors.margins: 15
                    spacing: 10

                    Label {
                        text: "Êìç‰Ωú:"
                        font.pixelSize: 14
                        color: "#666"
                    }

                    AnimatedButton {
                        text: "üîÑ Âà∑Êñ∞"
                        animationType: "pulse"
                        onClicked: {
                            startLoading()
                            root.refreshRequested()

                            // Ê®°ÊãüÂä†ËΩΩÂÆåÊàê
                            Qt.callLater(function() {
                                showSuccess()
                            })
                        }
                    }

                    Item { Layout.fillWidth: true }

                    // ÊâπÈáèÊìç‰ΩúÊåâÈíÆ
                    Button {
                        text: "üîß ÊâπÈáèÊìç‰Ωú"
                        Material.background: Material.Purple
                        enabled: selectedEmails.length > 0
                        onClicked: batchOperationMenu.open()

                        Menu {
                            id: batchOperationMenu
                            MenuItem {
                                text: "ÊâπÈáèÂà†Èô§"
                                onTriggered: batchDeleteDialog.open()
                            }
                            MenuItem {
                                text: "ÊâπÈáèÊ∑ªÂä†Ê†áÁ≠æ"
                                onTriggered: batchTagDialog.open()
                            }
                            MenuItem {
                                text: "ÊâπÈáè‰øÆÊîπÁä∂ÊÄÅ"
                                onTriggered: batchStatusDialog.open()
                            }
                        }
                    }

                    // È´òÁ∫ßÂØºÂá∫ÊåâÈíÆ
                    EnhancedButton {
                        text: "üì§ È´òÁ∫ßÂØºÂá∫"
                        variant: EnhancedButton.ButtonVariant.Filled
                        customColor: DesignSystem.colors.warning
                        onClicked: advancedExportDialog.open()
                    }
                }
            }
        }

        // ÈÇÆÁÆ±ÂàóË°®Âå∫Âüü
        Rectangle {
            Layout.fillWidth: true
            Layout.fillHeight: true
            color: "white"
            radius: 8
            border.color: "#e0e0e0"

            ColumnLayout {
                anchors.fill: parent
                anchors.margins: 20
                spacing: 15

                // ÂàóË°®Ê†áÈ¢òÊ†è
                RowLayout {
                    Layout.fillWidth: true
                    spacing: 10

                    CheckBox {
                        id: selectAllCheckBox
                        text: "ÂÖ®ÈÄâ"
                        font.pixelSize: 14
                        checked: root.selectAllMode
                        onCheckedChanged: {
                            root.selectAllMode = checked
                            if (checked) {
                                root.selectedEmails = root.emailList.map(function(email) {
                                    return email.id
                                })
                            } else {
                                root.selectedEmails = []
                            }
                        }
                    }

                    Label {
                        text: "ÈÇÆÁÆ±ÂàóË°®"
                        font.bold: true
                        font.pixelSize: 16
                        color: "#333"
                    }

                    Item { Layout.fillWidth: true }

                    Label {
                        text: root.selectedEmails.length > 0 ?
                              "Â∑≤ÈÄâÊã© " + root.selectedEmails.length + " ‰∏™ÔºåÂÖ± " + root.totalEmails + " ‰∏™ÈÇÆÁÆ±" :
                              "ÂÖ± " + root.totalEmails + " ‰∏™ÈÇÆÁÆ±"
                        font.pixelSize: 14
                        color: "#666"
                    }
                }

                // Âä†ËΩΩÊåáÁ§∫Âô®
                Rectangle {
                    Layout.fillWidth: true
                    Layout.fillHeight: true
                    color: "transparent"
                    visible: root.isLoading

                    ColumnLayout {
                        anchors.centerIn: parent
                        spacing: 20

                        BusyIndicator {
                            Layout.alignment: Qt.AlignHCenter
                            running: root.isLoading
                        }

                        Label {
                            text: "Ê≠£Âú®Âä†ËΩΩÈÇÆÁÆ±ÂàóË°®..."
                            font.pixelSize: 14
                            color: "#666"
                            Layout.alignment: Qt.AlignHCenter
                        }
                    }
                }

                // ÈÇÆÁÆ±ÂàóË°®
                AnimatedListView {
                    id: emailListView
                    Layout.fillWidth: true
                    Layout.fillHeight: true
                    visible: !root.isLoading

                    model: root.emailList
                    spacing: 8

                    // Âä®ÁîªÈÖçÁΩÆ
                    enableItemAnimations: true
                    enableAddAnimation: true
                    enableRemoveAnimation: true
                    enableMoveAnimation: true
                    animationType: "slideIn"
                    staggerDelay: 50

                    onItemAnimationCompleted: function(index) {
                        console.log("È°πÁõÆÂä®ÁîªÂÆåÊàê:", index)
                    }

                    onAllAnimationsCompleted: {
                        console.log("ÊâÄÊúâÂä®ÁîªÂÆåÊàê")
                    }

                        delegate: Rectangle {
                            width: emailListView.width
                            height: 80
                            color: {
                                if (isSelected) {
                                    return Qt.rgba(DesignSystem.colors.primary.r,
                                                  DesignSystem.colors.primary.g,
                                                  DesignSystem.colors.primary.b, 0.1)
                                }
                                return ThemeManager.colors.surface
                            }
                            radius: DesignSystem.radius.md
                            border.color: isSelected ? DesignSystem.colors.primary : ThemeManager.colors.outline
                            border.width: isSelected ? 2 : 1

                            property bool isSelected: root.selectedEmails.indexOf(modelData.id) >= 0

                            // ÈïøÊåâËøõÂÖ•ÈÄâÊã©Ê®°Âºè
                            MouseArea {
                                anchors.fill: parent
                                acceptedButtons: Qt.LeftButton | Qt.RightButton

                                onPressAndHold: {
                                    if (!batchOperationPanel.selectionMode) {
                                        batchOperationPanel.enterSelectionMode()
                                    }
                                    toggleItemSelection(modelData)
                                }

                                onClicked: function(mouse) {
                                    if (batchOperationPanel.selectionMode) {
                                        toggleItemSelection(modelData)
                                    } else if (mouse.button === Qt.RightButton) {
                                        // Âè≥ÈîÆËèúÂçï
                                        console.log("Âè≥ÈîÆËèúÂçï")
                                    }
                                }
                            }

                            RowLayout {
                                anchors.fill: parent
                                anchors.margins: 15
                                spacing: 15

                                // ÈÄâÊã©Ê°ÜÔºàÈÄâÊã©Ê®°ÂºèÊó∂ÊòæÁ§∫Ôºâ
                                CheckBox {
                                    visible: batchOperationPanel.selectionMode
                                    checked: parent.parent.isSelected
                                    onCheckedChanged: {
                                        toggleItemSelection(modelData)
                                    }
                                }

                                // ÈÇÆÁÆ±‰ø°ÊÅØ
                                ColumnLayout {
                                    Layout.fillWidth: true
                                    spacing: 5

                                    // ÈÇÆÁÆ±Âú∞ÂùÄÔºàÊîØÊåÅÊêúÁ¥¢È´ò‰∫ÆÔºâ
                                    HighlightedText {
                                        originalText: modelData.email_address || ""
                                        searchQuery: advancedSearchBar.searchText
                                        font.pixelSize: 14
                                        font.weight: DesignSystem.typography.weight.semiBold
                                        color: DesignSystem.colors.primary
                                    }

                                    RowLayout {
                                        spacing: 10

                                        Label {
                                            text: "ÂüüÂêç: " + (modelData.domain || "")
                                            font.pixelSize: DesignSystem.typography.label.small
                                            color: ThemeManager.colors.onSurfaceVariant
                                        }

                                        Label {
                                            text: "Áä∂ÊÄÅ: " + (modelData.status || "")
                                            font.pixelSize: DesignSystem.typography.label.small
                                            color: modelData.status === "active" ? DesignSystem.colors.success : DesignSystem.colors.error
                                        }

                                        Label {
                                            text: "ÂàõÂª∫: " + (modelData.created_at ? new Date(modelData.created_at).toLocaleDateString() : "")
                                            font.pixelSize: DesignSystem.typography.label.small
                                            color: ThemeManager.colors.onSurfaceVariant
                                        }
                                    }
                                }

                                // Ê†áÁ≠æÊòæÁ§∫
                                Flow {
                                    Layout.preferredWidth: 150
                                    spacing: 5

                                    Repeater {
                                        model: modelData.tags || []
                                        Rectangle {
                                            width: tagLabel.width + 10
                                            height: 20
                                            color: "#E3F2FD"
                                            radius: 10
                                            border.color: "#2196F3"

                                            Label {
                                                id: tagLabel
                                                anchors.centerIn: parent
                                                text: modelData
                                                font.pixelSize: 10
                                                color: "#2196F3"
                                            }
                                        }
                                    }
                                }

                                // Êìç‰ΩúÊåâÈíÆ
                                RowLayout {
                                    spacing: 5

                                    Button {
                                        text: "‚úèÔ∏è"
                                        font.pixelSize: 12
                                        implicitWidth: 30
                                        implicitHeight: 30
                                        ToolTip.text: "ÁºñËæë"
                                        onClicked: {
                                            // ÊâìÂºÄÁºñËæëÂØπËØùÊ°Ü
                                            editEmailDialog.emailData = modelData
                                            editEmailDialog.open()
                                        }
                                    }

                                    Button {
                                        text: "üóëÔ∏è"
                                        font.pixelSize: 12
                                        implicitWidth: 30
                                        implicitHeight: 30
                                        Material.background: Material.Red
                                        ToolTip.text: "Âà†Èô§"
                                        onClicked: {
                                            deleteConfirmDialog.emailId = modelData.id
                                            deleteConfirmDialog.emailAddress = modelData.email_address
                                            deleteConfirmDialog.open()
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                // ÂàÜÈ°µÊéßÂà∂
                Pagination {
                    Layout.fillWidth: true
                    currentPage: root.currentPage
                    totalPages: root.totalPages
                    totalItems: root.totalEmails
                    visible: !root.isLoading

                    onPageChanged: function(page) {
                        root.currentPage = page
                        performSearch()
                    }

                    onPageSizeChanged: function(size) {
                        // Â§ÑÁêÜÈ°µÈù¢Â§ßÂ∞èÂèòÂåñ
                        console.log("È°µÈù¢Â§ßÂ∞èÂèòÂåñ:", size)
                        root.currentPage = 1
                        performSearch()
                    }
                }
            }
        }
    }

    // Âà†Èô§Á°ÆËÆ§ÂØπËØùÊ°Ü
    Dialog {
        id: deleteConfirmDialog
        title: "Á°ÆËÆ§Âà†Èô§"
        modal: true
        anchors.centerIn: parent

        property int emailId: 0
        property string emailAddress: ""

        ColumnLayout {
            spacing: 20

            Label {
                text: "Á°ÆÂÆöË¶ÅÂà†Èô§ÈÇÆÁÆ± \"" + deleteConfirmDialog.emailAddress + "\" ÂêóÔºü"
                wrapMode: Text.WordWrap
                Layout.preferredWidth: 300
            }

            RowLayout {
                Layout.alignment: Qt.AlignRight
                spacing: 10

                Button {
                    text: "ÂèñÊ∂à"
                    onClicked: deleteConfirmDialog.close()
                }

                Button {
                    text: "Âà†Èô§"
                    Material.background: Material.Red
                    onClicked: {
                        root.deleteEmail(deleteConfirmDialog.emailId)
                        deleteConfirmDialog.close()
                    }
                }
            }
        }
    }

    // ÁºñËæëÈÇÆÁÆ±ÂØπËØùÊ°Ü
    Dialog {
        id: editEmailDialog
        title: "ÁºñËæëÈÇÆÁÆ±"
        modal: true
        anchors.centerIn: parent
        width: 400

        property var emailData: ({})

        ColumnLayout {
            spacing: 15
            width: parent.width

            TextField {
                id: editNotesField
                Layout.fillWidth: true
                placeholderText: "Â§áÊ≥®‰ø°ÊÅØ..."
                text: editEmailDialog.emailData.notes || ""
            }

            TextField {
                id: editTagsField
                Layout.fillWidth: true
                placeholderText: "Ê†áÁ≠æ (Áî®ÈÄóÂè∑ÂàÜÈöî)..."
                text: editEmailDialog.emailData.tags ? editEmailDialog.emailData.tags.join(", ") : ""
            }

            RowLayout {
                Layout.alignment: Qt.AlignRight
                spacing: 10

                Button {
                    text: "ÂèñÊ∂à"
                    onClicked: editEmailDialog.close()
                }

                Button {
                    text: "‰øùÂ≠ò"
                    Material.background: Material.Blue
                    onClicked: {
                        var updatedData = {
                            id: editEmailDialog.emailData.id,
                            notes: editNotesField.text,
                            tags: editTagsField.text.split(",").map(tag => tag.trim()).filter(tag => tag.length > 0)
                        }
                        root.editEmail(editEmailDialog.emailData.id, updatedData)
                        editEmailDialog.close()
                    }
                }
            }
        }

        // ÊâπÈáèÊìç‰ΩúÈù¢Êùø
        BatchOperationPanel {
            id: batchOperationPanel
            Layout.fillWidth: true

            onBatchDeleteRequested: function(items) {
                console.log("ÊâπÈáèÂà†Èô§:", items.length, "È°π")
                // ËøôÈáåË∞ÉÁî®ÂÆûÈôÖÁöÑÂà†Èô§API
                undoManager.addOperation({
                    type: "delete",
                    description: "Âà†Èô§‰∫Ü " + items.length + " ‰∏™ÈÇÆÁÆ±",
                    data: {items: items},
                    undoAction: function() {
                        // ÊÅ¢Â§çÂà†Èô§ÁöÑÈ°πÁõÆ
                        console.log("Êí§ÈîÄÂà†Èô§Êìç‰Ωú")
                    }
                })
            }

            onBatchEditRequested: function(items, changes) {
                console.log("ÊâπÈáèÁºñËæë:", items.length, "È°π", changes)
                undoManager.addOperation({
                    type: "edit",
                    description: "ÁºñËæë‰∫Ü " + items.length + " ‰∏™ÈÇÆÁÆ±",
                    data: {items: items, changes: changes}
                })
            }

            onBatchTagRequested: function(items, tags) {
                console.log("ÊâπÈáèÊ†áÁ≠æ:", items.length, "È°π", tags)
                undoManager.addOperation({
                    type: "addTags",
                    description: "‰∏∫ " + items.length + " ‰∏™ÈÇÆÁÆ±Ê∑ªÂä†‰∫ÜÊ†áÁ≠æ",
                    data: {items: items, tags: tags}
                })
            }

            onSelectionModeToggled: function(enabled) {
                console.log("ÈÄâÊã©Ê®°Âºè:", enabled)
            }
        }

        // ÂØºÂá∫‰ªªÂä°ÁÆ°ÁêÜÂô®
        ExportTaskManager {
            id: exportTaskManager
            Layout.fillWidth: true

            onTaskClicked: function(task) {
                console.log("‰ªªÂä°ÁÇπÂáª:", task.name)
            }

            onTaskCancelled: function(task) {
                console.log("‰ªªÂä°ÂèñÊ∂à:", task.name)
            }

            onAllTasksCompleted: {
                console.log("ÊâÄÊúâÂØºÂá∫‰ªªÂä°ÂÆåÊàê")
            }
        }
    }

    // ==================== Êí§ÈîÄÁÆ°ÁêÜÂô® ====================

    UndoManager {
        id: undoManager
        anchors.fill: parent

        onUndoRequested: function(operation) {
            console.log("ÊâßË°åÊí§ÈîÄ:", operation.type)
            if (operation.undoAction) {
                operation.undoAction()
            }
        }

        onRedoRequested: function(operation) {
            console.log("ÊâßË°åÈáçÂÅö:", operation.type)
        }
    }

    // ==================== È´òÁ∫ßÂØºÂá∫ÂØπËØùÊ°Ü ====================

    AdvancedExportDialog {
        id: advancedExportDialog
        exportData: root.emailList
        exportType: "emails"

        onExportRequested: function(options) {
            console.log("ÂºÄÂßãÂØºÂá∫:", options)

            // Ê∑ªÂä†ÂØºÂá∫‰ªªÂä°
            var taskId = exportTaskManager.addTask({
                name: "ÈÇÆÁÆ±Êï∞ÊçÆÂØºÂá∫ - " + options.format.toUpperCase(),
                type: "emails",
                format: options.format,
                data: root.emailList,
                options: options
            })

            // Ê®°ÊãüÂØºÂá∫ËøáÁ®ã
            Qt.callLater(function() {
                // ËøôÈáåÂ∫îËØ•Ë∞ÉÁî®ÂÆûÈôÖÁöÑÂØºÂá∫API
                root.exportEmails(options.format)
            })
        }

        onExportCancelled: {
            console.log("ÂØºÂá∫ÂèñÊ∂à")
        }
    }

    // ÂÜÖÈÉ®ÊñπÊ≥ï
    function performSearch() {
        // ‰øùÊåÅÂêëÂêéÂÖºÂÆπÁöÑÁÆÄÂçïÊêúÁ¥¢
        root.searchEmails("", "", [], root.currentPage)
    }

    function performAdvancedSearch(query, filters) {
        // È´òÁ∫ßÊêúÁ¥¢ÊñπÊ≥ï
        searchStats.setSearching(true)
        var startTime = Date.now()

        // Ê®°ÊãüÊêúÁ¥¢Âª∂Ëøü
        Qt.callLater(function() {
            var searchTime = (Date.now() - startTime) / 1000
            var resultCount = Math.floor(Math.random() * 100) + 1 // Ê®°ÊãüÁªìÊûúÊï∞Èáè

            searchStats.updateStats(query, resultCount, searchTime, filters)
            searchStats.setSearching(false)

            // Ë∞ÉÁî®ÂÆûÈôÖÊêúÁ¥¢
            root.searchEmails(query, filters.status || "", filters.tags || [], root.currentPage)
        })
    }

    function clearSearch() {
        // Ê∏ÖÈô§ÊêúÁ¥¢Áä∂ÊÄÅ
        searchStats.clearSearch()
        root.searchEmails("", "", [], 1)
    }

    function toggleItemSelection(item) {
        var emailId = item.id
        var index = root.selectedEmails.indexOf(emailId)

        if (index < 0) {
            root.selectedEmails.push(emailId)
            batchOperationPanel.toggleItemSelection(item)
        } else {
            root.selectedEmails.splice(index, 1)
            batchOperationPanel.toggleItemSelection(item)
        }

        // Ëß¶ÂèëÂ±ûÊÄßÊõ¥Êñ∞
        root.selectedEmails = root.selectedEmails.slice()
    }

    function resetToFirstPage() {
        root.currentPage = 1
    }

    function clearSelection() {
        root.selectedEmails = []
        root.selectAllMode = false
    }
}

// ÊâπÈáèÂà†Èô§Á°ÆËÆ§ÂØπËØùÊ°Ü
ConfirmDialog {
    id: batchDeleteDialog
    titleText: "ÊâπÈáèÂà†Èô§Á°ÆËÆ§"
    messageText: "Á°ÆÂÆöË¶ÅÂà†Èô§ÈÄâ‰∏≠ÁöÑ " + root.selectedEmails.length + " ‰∏™ÈÇÆÁÆ±ÂêóÔºü\nÊ≠§Êìç‰Ωú‰∏çÂèØÊí§ÈîÄ„ÄÇ"
    destructive: true

    onConfirmed: {
        // ÊâßË°åÊâπÈáèÂà†Èô§
        console.log("ÊâπÈáèÂà†Èô§ÈÇÆÁÆ±:", root.selectedEmails)
        root.clearSelection()
    }
}

// ÊâπÈáèÊ∑ªÂä†Ê†áÁ≠æÂØπËØùÊ°Ü
Dialog {
    id: batchTagDialog
    title: "ÊâπÈáèÊ∑ªÂä†Ê†áÁ≠æ"
    modal: true
    anchors.centerIn: parent
    width: 400

    ColumnLayout {
        spacing: 15
        width: parent.width

        Label {
            text: "‰∏∫ÈÄâ‰∏≠ÁöÑ " + root.selectedEmails.length + " ‰∏™ÈÇÆÁÆ±Ê∑ªÂä†Ê†áÁ≠æ:"
            wrapMode: Text.WordWrap
        }

        TextField {
            id: batchTagField
            Layout.fillWidth: true
            placeholderText: "ËæìÂÖ•Ê†áÁ≠æÂêçÁß∞ÔºåÁî®ÈÄóÂè∑ÂàÜÈöî..."
        }

        RowLayout {
            Layout.alignment: Qt.AlignRight
            spacing: 10

            Button {
                text: "ÂèñÊ∂à"
                onClicked: batchTagDialog.close()
            }

            Button {
                text: "Ê∑ªÂä†"
                Material.background: Material.Blue
                enabled: batchTagField.text.trim().length > 0
                onClicked: {
                    console.log("ÊâπÈáèÊ∑ªÂä†Ê†áÁ≠æ:", root.selectedEmails, batchTagField.text)
                    batchTagField.text = ""
                    batchTagDialog.close()
                    root.clearSelection()
                }
            }
        }
    }
}

// ÊâπÈáè‰øÆÊîπÁä∂ÊÄÅÂØπËØùÊ°Ü
Dialog {
    id: batchStatusDialog
    title: "ÊâπÈáè‰øÆÊîπÁä∂ÊÄÅ"
    modal: true
    anchors.centerIn: parent
    width: 300

    ColumnLayout {
        spacing: 15
        width: parent.width

        Label {
            text: "‰øÆÊîπÈÄâ‰∏≠ÁöÑ " + root.selectedEmails.length + " ‰∏™ÈÇÆÁÆ±Áä∂ÊÄÅ‰∏∫:"
            wrapMode: Text.WordWrap
        }

        ComboBox {
            id: batchStatusCombo
            Layout.fillWidth: true
            model: ["Ê¥ªË∑É", "ÈùûÊ¥ªË∑É", "ÂΩíÊ°£"]
            currentIndex: 0
        }

        RowLayout {
            Layout.alignment: Qt.AlignRight
            spacing: 10

            Button {
                text: "ÂèñÊ∂à"
                onClicked: batchStatusDialog.close()
            }

            Button {
                text: "‰øÆÊîπ"
                Material.background: Material.Blue
                onClicked: {
                    console.log("ÊâπÈáè‰øÆÊîπÁä∂ÊÄÅ:", root.selectedEmails, batchStatusCombo.currentText)
                    batchStatusDialog.close()
                    root.clearSelection()
                }
            }
        }
    }
}
